import wx


tiles = [[-4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3], [-3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -4, -3, -3, -3, -4, -3, -4, -3, -4, -4, -4, -3, -3, -3, -3, -3], [-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3], [-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3], [-3, -4, -3, -4, -3, -3, -3, -3, -4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3], [-3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -4, -4, -3, -4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3], [-3, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -4, -4, -3, -4], [-3, -4, -3, -3, -3, -3, -3, -3, -4, -3, -4, -3, -3, -4, -3, -4, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3], [-3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -4, -3, -4, -3, -4, -4, -3, -3, -3, -3, -3, -3, -3], [-3, -4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3], [-4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3], [-1, -2, -2, -3, -1, -2, -1, -1, -1, -3, -4, -3, -3, -4, -3, -3, -3, -4, -4, -3, -3, -3, -3, -3, -3, -3], [-1, 1, -2, -1, -2, 1, 1, 1, -2, -1, -4, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3, -4], [1, 1, 1, -2, 1, 1, -2, 1, 1, -2, -4, -4, -3, -3, -3, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3], [1, 1, 1, 1, 1, -2, -2, 1, 1, -1, -3, -3, -3, -3, -3, -3, -3, -3, -4, -3, -4, -3, -3, -3, -4, -3], [1, 1, 1, -2, 1, 1, 1, 1, 1, -2, -1, -1, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -4, -3, -3], [1, 1, 1, 1, 1, 1, 1, -2, 1, 1, 1, -1, -1, -4, -4, -3, -3, -3, -4, -3, -4, -4, -3, -3, -3, -3], [1, 1, 1, -2, 1, -2, 1, 1, 1, 1, 1, 1, -1, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4], [1, 1, 1, -2, 1, -1, 1, 1, 1, 1, 1, 1, -1, -3, -4, -4, -4, -3, -3, -3, -3, -4, -3, -3, -4, -3], [-2, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2, 1, -2, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -3, -4, -3, -3, -3, -3, -3, -3, -4, -4, -4, -3, -3], [-2, -2, 1, 1, 1, 1, 1, 1, -2, 1, 1, 1, -1, -3, -3, -3, -4, -3, -4, -3, -4, -4, -3, -3, -3, -3], [-3, -1, -2, 1, -2, -2, 1, 1, 1, -2, -1, -1, -2, -3, -3, -3, -4, -4, -4, -3, -3, -3, -3, -3, -4, -3], [-3, -2, 1, 1, -2, 1, 1, 1, -2, -2, 1, -1, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3], [-4, -2, 1, -2, -2, -2, 1, 1, 1, 1, 1, -2, -4, -4, -3, -4, -3, -3, -3, -4, -3, -3, -3, -3, -3, -3], [-3, -2, 1, 1, 1, -2, 1, -2, 1, -2, 1, -1, -4, -4, -4, -3, -4, -3, -3, -3, -3, -3, -3, -3, -4, -4]]
armies = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 2, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 2, 0, 2, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 2, 2, 3, 2, 3, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 0, 3, 0, 3, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 3, 0, 3, 47, 3, 2, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 4, 4, 4, 3, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 3, 4, 4, 4, 5, 4, 3, 44, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 104, 4, 5, 4, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 0, 4, 4, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 3, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
rows = len(tiles)
cols = len(tiles[0])
assert rows == len(armies) and cols == len(armies[0])

class MyFrame(wx.Frame):
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent, title=title, size=(500, 400))
        self.panel = wx.Panel(self)
        self.panel.SetBackgroundColour("#E6E6E6")
        self.panel.Bind(wx.EVT_PAINT, self.repaint)

        self.Centre()
        self.Show()

    def repaint(self, event):
        dc = wx.PaintDC(self.panel)
        dc.SetPen(wx.Pen('#000000'))
        for r in range(rows):
            for c in range(cols):
                if tiles[r][c] in (-3, -4):
                    dc.SetBrush(wx.Brush('#393939'))
                elif tiles[r][c] == -2:
                    dc.SetBrush(wx.Brush('#bbbbbb'))
                elif tiles[r][c] == -1:
                    dc.SetBrush(wx.Brush('#dcdcdc'))
                elif tiles[r][c] == 0:
                    dc.SetBrush(wx.Brush('#ea3323'))
                elif tiles[r][c] == 1:
                    dc.SetBrush(wx.Brush('#4a62d1'))
                else:
                    dc.SetBrush(wx.Brush('#00c56c'))
                dc.DrawRectangle(c * 10, r * 10, 10, 10)

        self.Show(True)


if __name__ == '__main__':
    app = wx.App()
    frame = MyFrame(None, "Test")
    app.MainLoop()